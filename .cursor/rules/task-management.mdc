---
description: 
globs: 
alwaysApply: true
---
# Task Management System

## Overview

This document defines MANDATORY task management using TodoRead and TodoWrite tools. These tools provide persistent, project-scoped todo lists stored in `.mcp-todos.json` in the current working directory.

## Decision Criteria: When to Use Todos

### ‚úÖ ALWAYS Use Todos For:

1. **Multi-step tasks** (3+ distinct steps)
2. **Non-trivial implementations** requiring planning
3. **User explicitly requests task tracking**
4. **User provides multiple tasks** (numbered lists, comma-separated)
5. **Complex debugging or refactoring**

### ‚ùå NEVER Use Todos For:

1. **Simple questions** ("What's 2+2?", "Show me the README")
2. **Trivial single actions** ("Add a comment to this function")
3. **Pure explanations** ("Explain how X works")

## üî• MANDATORY WORKFLOW üî•

### 1. Start Every Conversation

**ALWAYS begin with TodoRead() for any non-trivial request:**

```
"Let me check the current todo status first..."
[Uses TodoRead()]

IF todos exist:
- Display complete list with visual progress
- Ask: "I found existing todos. Would you like to:
  - Continue working on these tasks, or
  - Clear them and start fresh?"
- If clear: TodoWrite([]) ‚Üí proceed with new request
- If continue: work on existing todos

IF no todos exist:
- For complex tasks: create todos immediately  
- For simple tasks: proceed without todos
```

### 2. Create Todos (for complex tasks)

```
[Analyze user request]
[Break down into 3-8 specific, actionable tasks]
[Use TodoWrite() with complete todo array]
[Display full list with visual indicators]
```

### 3. Work Through Tasks

```
FOR each task:
1. Mark as "in_progress" BEFORE starting
2. Display updated full list
3. Perform the work
4. Mark as "completed" IMMEDIATELY after finishing
5. Display updated full list
6. Move to next task
```

## Tool Reference

### TodoRead Tool
- **Parameters**: NONE (empty input)
- **Returns**: Array of todo objects
- **Use**: Check existing todos, display current state

### TodoWrite Tool  
- **Parameters**: `todos` array (complete replacement)
- **Behavior**: Replaces entire todo list
- **Required fields**: id, content, status, priority
- **Auto-managed**: created_at, updated_at timestamps

**Todo Structure:**
```json
{
  "id": "unique-identifier",
  "content": "specific task description", 
  "status": "pending|in_progress|completed",
  "priority": "high|medium|low",
  "metadata": null
}
```

## üö® MANDATORY VISUAL DISPLAY üö®

**CRITICAL: Display COMPLETE todo list after EVERY TodoRead() or TodoWrite()**

**Required format:**
```
Current todos:
‚úÖ Research existing patterns (completed)
üîÑ Implement login form (in_progress)  
‚è≥ Add validation (pending)
‚è≥ Write tests (pending)
```

**Rules:**
- ‚úÖ = completed
- üîÑ = in_progress  
- ‚è≥ = pending
- Show ALL todos, never just "updated"
- Display after every todo operation
- User must see full current state

## State Management Rules

1. **Only ONE task "in_progress" at any time**
2. **Update status in real-time** (never batch)
3. **Mark completed IMMEDIATELY** after finishing
4. **Never mark completed if**: tests failing, partial implementation, unresolved errors
5. **For blockers**: keep as "in_progress", create new task describing blocker

## Examples of Task Breakdown

### Example 1: "Add user authentication"
```
1. Research existing auth patterns in codebase
2. Design database schema for users/sessions
3. Implement user model and migrations
4. Create registration endpoint
5. Create login endpoint
6. Add JWT token generation
7. Implement auth middleware
8. Write unit tests for auth flow
9. Add integration tests
10. Update API documentation
```

### Example 2: "Fix performance issues"
```
1. Profile current performance bottlenecks
2. Analyze database query patterns
3. Implement query optimizations
4. Add caching layer
5. Optimize frontend bundle size
6. Run performance benchmarks
7. Document performance improvements
```

## Anti-Patterns to Avoid

1. **Don't batch status updates** - Update immediately
2. **Don't create vague tasks** - "Fix stuff" ‚Üí "Fix null pointer in UserService.validate()"
3. **Don't skip todo creation** for complex tasks to "save time"
4. **Don't mark incomplete work as completed**
5. **Don't have multiple tasks "in_progress"**
6. **Don't create todos for trivial single-step tasks**
7. **üö® NEVER skip TodoRead() at conversation start** 
8. **üö® NEVER update todos without showing visual status**
9. **üö® NEVER work on tasks without marking them in_progress first**
